# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

-------------

#1 What is the average danceability by artist and track?

SELECT artist_name, track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY danceability DESC

-------------

#2 Who are the top 10 artists based on popularity?

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10

-------------

#3 Which artist released the longest song?
SELECT artist_name, track_name, MAX(duration_ms)
FROM BIT_DB.Spotifydata

-------------

#4 Top 10 popular songs

SELECT track_name, popularity, danceability
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10

-------------

#5 What's the average danceability for the 10 most popular songs?

SELECT AVG(danceability) FROM BIT_DB.Spotifydata
WHERE popularity IN (SELECT popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10)

-------------

#6 How many songs does an artist have from this list
SELECT artist_name, COUNT(*)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(*) DESC

-------------

#7 Categorized songs by their keys using CASE (if >8 is high, >5 is mid and all esle is low)

SELECT track_name, song_key,
    CASE 
        WHEN song_key > 8 THEN 'high'
        WHEN song_key > 5 THEN 'mid'
        ELSE 'low'
    END AS key_level
FROM BIT_DB.Spotifydata

-------------

#8 Summarized how many songs in the list that belongs to each category
SELECT COUNT (8),
    CASE 
        WHEN song_key > 8 THEN 'high'
        WHEN song_key > 5 THEN 'mid'
        ELSE 'low'
    END AS key_level
FROM BIT_DB.Spotifydata
GROUP BY key_level

-------------

#9 Calculate the average popularity for the artists in the Spotify data table. Then, for every artist with an average popularity of 
90 or above, show their name, their average popularity, and label them as a “Top Star”.

WITH avg_popularity AS (
    SELECT s.artist_name, 
    AVG(s.popularity) AS avgpop
    FROM Spotifydata s
    GROUP BY s.artist_name)

SELECT artist_name, avgpop, 'Top Star' AS tag
FROM avg_popularity
WHERE avgpop >=90

-------------

#10 Rank the artists popularity based on how many songs they have in the top 50   

SELECT artist_name, COUNT(artist_name) as total_songs,
CASE
    WHEN COUNT(artist_name) >=4 THEN 'Most Popular'
    WHEN COUNT(artist_name) >=3 THEN 'Second Most Popular'
    WHEN COUNT(artist_name) >=2 THEN 'Third Most Popular'
    ELSE 'unranked'
END AS artist_popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY total_songs DESC
